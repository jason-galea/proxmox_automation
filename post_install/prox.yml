### This playbook expects a freshly install Proxmox VM, with IP matching inv.yml

### Steps:
# Create VM in Hyper-V
# Boot ISO
### Installation Summary:
# Filesystem:     ext4
# Disk(s):        /dev/sda
# Country:        Australia
# Timezone:       Australia/Melbourne
# Keymap:         en-US
# Email:          1@2.3
# Management Int: eth0
# Hostname:       prox
# Domain:         test.lan
# IP:             172.26.0.2
# Gateway:        172.26.0.1
# DNS:            172.26.0.1
### VM will be ready after first reboot

---
  ### TODO: Convert this into a role???
- name: "Prepare Proxmox for SSH"
  hosts: localhost
  gather_facts: no
  vars:
    # host_to_configure: prox

    ### TODO: Move these vars into "set_facts" inside role
    prox_ip: "{{ hostvars[host_to_configure].ip }}"
    prox_user: "{{ hostvars[host_to_configure].ansible_user }}"
    # prox_ip: 172.26.0.2
    # prox_user: root
  tasks:
    ### TODO: Check if accessible, if so then skip entire playbook
    ### The skip could be done with multiple "when" statements on every task,
    ### or with some command that completely cancels this play
    ### Research --> decide --> implement
  # - name: "Check if host is already accessible"
  #   wait_for_connection: ???

    # TODO: Use built-in module instead?
  - name: "Remove old Proxmox key from localhost"
    command: "ssh-keygen -R {{ prox_ip }}"
    # when: ???

  - name: "Install sshpass on localhost"
    apt:
      pkg: sshpass
      state: present
      update_cache: yes
    become: yes
    register: install_sshpass
    # when: ???
  - debug:
      var: install_sshpass.stdout
    when: install_sshpass.stdout is defined

  - name: "Authorise localhost key on Proxmox"
    command: "sshpass -p {{ password }} ssh-copy-id -o 'StrictHostKeyChecking no' {{ prox_user }}@{{ prox_ip }}"
    # when: ???
    

- name: "Configure Proxmox"
  hosts: prox
  gather_facts: no
  tasks:
  - name: "Verify DNS & internet via ping"
    command: "ping -c 3 example.com"
    register: ping
  - debug:
      var: ping.stdout

    ### TODO: Use templates module
  - name: "Add non-subscription repo"
    ### OPTION 1:
    # templates:
    #   path: ???
    ### OPTION 2:
    # vars:
    #   apt_sources: "/etc/apt/sources.list"
    # shell: |
    #   echo '' >> {{ apt_sources }}
    #   echo '# PVE pve-no-subscription repository provided by proxmox.com,' >> {{ apt_sources }}
    #   echo '# NOT recommended for production use' >> {{ apt_sources }}
    #   echo 'deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription' >> {{ apt_sources }}
    ### OPTION 3:
    shell: echo '{{ item }}' >> /etc/apt/sources.list
    with_items:
    - ''
    - '# PVE pve-no-subscription repository provided by proxmox.com,'
    - '# NOT recommended for production use'
    - 'deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription'

  - name: "Disable enterprise repo"
    file:
      path: "/etc/apt/sources.list.d/pve-enterprise.list"
      state: absent

  - name: "Update & upgrade"
    apt:
      upgrade: yes
      update_cache: yes
    register: update
  - debug:
      var: update.stdout
    when: update.stdout is defined

    ### Download most recent ubuntu CT template
  - name: "Update PVEAM"
    command: "pveam update"
    register: pveam_update
  - debug:
      var: pveam_update.stdout
    when: pveam_update.stdout is defined

  - name: "Find most recent ubuntu CT template"
    shell: "pveam available | grep ubuntu | awk '{print $2}' | sort | tail -n 1"
    register: ubuntu_ct
  - debug:
      var: ubuntu_ct.stdout
    when: ubuntu_ct.stdout is defined

  - name: "Download most recent ubuntu CT template"
    command: "pveam download local {{ ubuntu_ct.stdout }}"
    register: pveam_download
  - debug:
      var: pveam_download.stdout
    when: pveam_download.stdout is defined

  - name: "Verify webserver at https://{{ ansible_host }}:{{ port }}"
    wait_for:
      port: "{{ port }}"
      timeout: 10