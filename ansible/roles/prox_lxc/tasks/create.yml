# ### Chose CT template
# - name: Verify base CT template has been downloaded to Proxmox
#   delegate_to: prox
#   when: inventory_hostname == "base-ct"
#   block:

#     ### NOTE: "base_template" is only statically defined for host "base"
#     - name: "Get stats of CT template file already on Proxmox"
#       ansible.builtin.stat:
#         path: "{{ prox_base_template_dir }}/{{ base_template }}"
#       register: stat_base_template

#     - name: "Download CT template"
#       ansible.builtin.command: "pveam download local {{ base_template }}"
#       when: not stat_base_template.stat.exists
#       register: download_base_template
#       changed_when: download_base_template.rc != 0

#     # - name: "DEBUG: Show download output"
#     #   ansible.builtin.debug:
#     #     var: download_base_template.stdout_lines
#     #   when: download_base_template.stdout_lines is defined

# - name: "Discover base CT VZdump backup"
#   when: inventory_hostname != "base-ct"
#   block:
#     - name: "Discover base CT VZdump name"
#       delegate_to: prox
#       ansible.builtin.shell:
#         cmd: |
#           set -o pipefail
#           ls {{ prox_base_template_dir }} \
#             | grep 'vzdump.*{{ hostvars['base-ct'].id }}.*tar.zst' \
#             | head -n1
#         executable: /bin/bash
#       register: discover_base_ct_vzdump_name
#       changed_when: discover_base_ct_vzdump_name.rc != 0

#     - name: "Save base CT VZdump name as fact"
#       ansible.builtin.set_fact:
#         base_template: "{{ discover_base_ct_vzdump_name.stdout }}"


# # - name: "DEBUG: Show base_template"
# #   ansible.builtin.debug:
# #     var: base_template


### SSH
- name: Create new SSH key
  loop:
    - remove
    - create
  ansible.builtin.include_role:
    name: ssh
    tasks_from: "{{ item }}"


### Base
- name: Create base container
  when: inventory_hostname == "base-ct"
  block:

    ### CT Template
    - name: Get stats of existing base CT template file
      delegate_to: prox
      ansible.builtin.stat:
        path: "{{ prox_base_template_dir }}/{{ base_template }}"
      register: stat_base_template

    - name: Download base CT template
      delegate_to: prox
      ansible.builtin.command: "pveam download local {{ base_template }}"
      when: not stat_base_template.stat.exists
      register: download_base_template
      changed_when: download_base_template.rc != 0

    # - name: "DEBUG: Show download output"
    #   ansible.builtin.debug:
    #     var: download_base_template.stdout_lines
    #   when: download_base_template.stdout_lines is defined


    ### Create Base
    - name: Create base container
      delegate_to: localhost
      community.general.proxmox:
        node: prox
        api_host: "{{ hostvars['prox'].ansible_ssh_host }}"
        api_user: root@pam
        api_password: "{{ lookup('file', password_file) }}"

        hostname: "{{ inventory_hostname }}"
        vmid: "{{ id }}"

        ostemplate: local:vztmpl/{{ base_template }}
        storage: local-lvm

        netif: "{'net0':'name=eth0,bridge=vmbr0,firewall=1,type=veth,ip={{ ansible_ssh_host }}/24,gw={{ gateway }}'}"
        pubkey: "{{ lookup('file', ansible_ssh_public_key_file) }}"
        cores: 2
        memory: 512 # MB
        swap: 100 # MB
        disk: 8 # GB
        onboot: true


### Clone
- name: Clone base container
  when: inventory_hostname != "base-ct"
  block:

    - name: Create linked clone container
      when: inventory_hostname != "base-ct"
      delegate_to: localhost
      community.general.proxmox:
        node: prox
        api_host: "{{ hostvars['prox'].ansible_ssh_host }}"
        api_user: root@pam
        api_password: "{{ lookup('file', password_file) }}"

        hostname: "{{ inventory_hostname }}"
        vmid: "{{ id }}"

        clone: "{{ hostvars['base-ct'].id }}"
        clone_type: linked


    # - name: Add host details
    #   when: inventory_hostname != "base-ct"
    #   delegate_to: localhost
    #   community.general.proxmox:
    #     node: prox
    #     api_host: "{{ hostvars['prox'].ansible_ssh_host }}"
    #     api_user: root@pam
    #     api_password: "{{ lookup('file', password_file) }}"

    #     vmid: "{{ id }}"

    #     netif: "{'net0':'name=eth0,bridge=vmbr0,firewall=1,type=veth,ip={{ ansible_ssh_host }}/24,gw={{ gateway }}'}"
    #     pubkey: "{{ lookup('file', ansible_ssh_public_key_file) }}"

    #     state: stopped


    # ### You straight up cannot update cloned CT details with the proxmox module???
    # - name: Really fucking annoying workaround
    #   delegate_to: prox
    #   vars: ### NOTE: Workaround, only required when container isn't online
    #     ansible_ssh_private_key_file: "{{ hostvars['prox'].ansible_ssh_private_key_file }}"
    #   block:

    #     - name: Add network details
    #       ansible.builtin.command: |
    #         pct set 241 \
    #           --net0 name=eth0,bridge=vmbr0,firewall=1,type=veth,ip={{ ansible_ssh_host }}/24,gw={{ gateway }}

    #     - name: Add SSH key


# - name: Wait for container to finish being created
#   ansible.builtin.pause:
#     seconds: 2


# ### Details
# - name: Add host details to container
#   delegate_to: localhost
#   community.general.proxmox:
#     node: prox
#     api_host: "{{ hostvars['prox'].ansible_ssh_host }}"
#     api_user: root@pam
#     api_password: "{{ lookup('file', password_file) }}"

#     # hostname: "{{ inventory_hostname }}"
#     vmid: "{{ id }}"


### Custom configs
- name: "Add custom LXC configs"
  delegate_to: prox
  loop: "{{ ct_custom_configs }}"
  ansible.builtin.lineinfile:
    dest: "/etc/pve/lxc/{{ id }}.conf"
    line: "{{ item }}"
  when: ct_custom_configs is defined


### Start
- name: "Start container"
  delegate_to: localhost
  community.general.proxmox:
    api_host: "{{ hostvars['prox'].ansible_ssh_host }}"
    api_user: root@pam
    api_password: "{{ lookup('file', password_file) }}"

    vmid: "{{ id }}"
    state: started

- name: Wait for container to respond
  ansible.builtin.wait_for_connection:


# ### DEBUG
# - name: "DEBUG: Run 'id' command on new Portainer VM"
#   ansible.builtin.command: "id"
#   register: id_command_result
#   changed_when: id_command_result != 0

# - name: "DEBUG: Show 'id' command output"
#   ansible.builtin.debug:
#     var: id_command_result.stdout
