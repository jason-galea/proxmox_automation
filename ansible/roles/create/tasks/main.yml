### Check
- name: "Check if container already exists"
  delegate_to: prox
  # ansible.builtin.shell: "pct list | grep {{ id }} | grep running | cat"
  ansible.builtin.shell: |
    set -o pipefail
    pct list | grep {{ id }} | grep running | cat
  register: check_if_container_already_exists_result
  changed_when: check_if_container_already_exists_result.rc != 0

- name: "Create container"
  when: check_if_container_already_exists_result.stdout == ""
  block:

    ### Chose CT template
    - name: "Chose CT template"
      when: inventory_hostname != "base_ct_template"
      block:
        - name: "Discover base CT template name"
          delegate_to: prox
          # ansible.builtin.shell: "ls {{ template_dir }} | grep 'vzdump.*{{ hostvars['base'].id }}.*tar' | cat"
          ansible.builtin.shell: |
            set -o pipefail
            ls {{ template_dir }} | grep 'vzdump.*{{ hostvars['base'].id }}.*tar' | cat
          register: name
          changed_when: check_if_container_already_exists_result.rc != 0

        - name: "Save base CT template name as fact"
          ansible.builtin.set_fact:
            chosen_ct_template: "local:vztmpl/{{ name.stdout }}"

    - name: "Statically set Proxmox CT template to create base CT template from"
      ansible.builtin.set_fact:
        # chosen_ct_template: "local:vztmpl/ubuntu-20.04-standard_20.04-1_amd64.tar.gz"
        chosen_ct_template: "local:vztmpl/ubuntu-21.10-standard_21.10-1_amd64.tar.zst"
        # chosen_ct_template: "local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst"
        # chosen_ct_template: "local:vztmpl/alpine-3.15-default_20211202_amd64.tar.xz"
      when: inventory_hostname == "base_ct_template"

    - name: "DEBUG: Show chosen CT template"
      ansible.builtin.debug:
        var: chosen_ct_template


    ### Create container
    - name: "Create container(s)"
      delegate_to: localhost
      community.general.proxmox:
        proxmox_default_behavior: no_defaults

        api_host: "{{ hostvars['prox'].ansible_ssh_host }}"
        api_user: root@pam
        api_password: "{{ hostvars['prox'].password }}"

        vmid: "{{ id }}"

        node: prox
        state: present
        # netif: "{{ ct_netif }}"
        netif: '{"net0":"name=eth0,bridge=vmbr0,firewall=1,type=veth,ip={{ ansible_ssh_host }}/24,gw={{ gateway }}"}'
        ostemplate: "{{ chosen_ct_template }}"
        hostname: "{{ inventory_hostname }}"
        # password: "{{ hostvars['prox'].password }}"
        pubkey: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
        cores: 2
        memory: 512 # MB
        swap: 100 # MB
        disk: 8 # GB
        storage: local-lvm
        unprivileged: true
        onboot: true
        features:
          - nesting=1


    ### Additional features
      # TODO: Replace with builtin
    - name: "Add custom LXC configs"
      delegate_to: prox
      # ansible.builtin.shell: "echo '{{ config_line }}' >> /etc/pve/lxc/{{ id }}.conf"
      ansible.builtin.shell: |
        set -o pipefail
        echo '{{ item }}' >> /etc/pve/lxc/{{ id }}.conf
      loop: ct_custom_configs
      register: add_custom_lxc_configs_result
      changed_when: add_custom_lxc_configs_result.rc != 0
      when: ct_custom_configs is defined

    ### Start
    - name: "Start containers"
      delegate_to: localhost
      community.general.proxmox:
        api_host: "{{ prox_host }}"
        api_user: "{{ prox_user }}"
        api_password: "{{ prox_password }}"

        vmid: "{{ id }}"
        state: started

    - name: "Wait 5 seconds to container to start"
      ansible.builtin.pause:
        seconds: 5


### Verify
- name: "Verify containers are online"
  vars:
    ansible_user: root # Workaround
  ansible.builtin.wait_for_connection:
    timeout: 5
  retries: 5

# - name: "Install SSH in Alpine"
#   delegate_to: prox
#   ansible.builtin.command: "pct exec {{ id }} {{ item }}"
#   loop:
#   - 'apk update'
#   - 'apk add openssh'
#   - 'rc-update add sshd'
#   - 'rc-status'
#   - '/etc/init.d/sshd start'
#   when: (id == 200) and (distro == "alpine")
#   timeout: 5
#   retries: 5

- name: "Add new SSH key to known hsots"
  delegate_to: localhost
  # connection: local
  # ansible.builtin.shell: "ssh-keyscan -H {{ ip }} >> ~/.ssh/known_hosts"
  ansible.builtin.shell: |
    set -o pipefail
    ssh-keyscan -H {{ ip }} >> ~/.ssh/known_hosts
  register: add_custom_lxc_configs_result
  changed_when: add_custom_lxc_configs_result.rc != 0
