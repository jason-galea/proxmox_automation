

### A records
- name: Create/wipe A records file
  ansible.builtin.copy:
    content: ""
    dest: "{{ a_records_file }}"
    force: true
    owner: root
    group: root
    mode: "644"

- name: Populate A records file ### E.G: "1.2.3.4 a.test.lan"
  loop: "{{ groups['all'] }}"
  ansible.builtin.lineinfile:
    dest: "{{ a_records_file }}"
    line: "{{ hostvars[item].ip }} {{ hostvars[item].fqdn }}"


### CNAME records
- name: Create/wipe CNAME records file
  ansible.builtin.copy:
    content: ""
    dest: "{{ cname_records_file }}"
    force: true
    owner: root
    group: root
    mode: "644"

- name: "Populate CNAME records file" ### E.G: "cname=cname.test.lan,a.test.lan"
  loop: "{{ groups['all'] }}"
  when: hostvars[item].cname is defined
  ansible.builtin.lineinfile:
    dest: "{{ cname_records_file }}"
    line: "cname={{ hostvars[item].cname }},{{ hostvars[item].fqdn }}"


### Restart
- name: Restart DNS
  ansible.builtin.command: "pihole restartdns"
  register: pihole_restartdns
  changed_when: pihole_restartdns.rc != 0


# ### DEBUG
# - name: "DEBUG: Show ip for groups['all']"
#   loop: "{{ groups['all'] }}"
#   ansible.builtin.debug:
#     var: hostvars[item].ip


### TODO: FIX DNS RESOLUTION FOR DOCKER CONTAINERS
### They're not registering ip: "{{ hostvars['portainer'].ip }}" from the inventory
### Verify
- name: Verify A records from localhost
  delegate_to: localhost
  loop: "{{ groups['all'] }}"
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      nslookup {{ hostvars[item].fqdn }} {{ dns }} | grep '{{ hostvars[item].ip }}'
    executable: /bin/bash
  register: verify_a_records
  changed_when: verify_a_records.rc != 0
  failed_when: "verify_a_records.stdout == ''"

- name: Verify CNAME records from localhost
  delegate_to: localhost
  loop: "{{ groups['all'] }}"
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      nslookup {{ hostvars[item].cname }} {{ dns }} | grep '^{{ hostvars[item].cname }}'
    executable: /bin/bash
  when: hostvars[item].cname is defined
  register: verify_cname_records
  changed_when: verify_cname_records.rc != 0
  failed_when: "verify_cname_records.stdout == ''"