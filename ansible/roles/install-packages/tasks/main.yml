# - name: Populate pip package list for nested docker
#   ansible.builtin.set_fact:
#     apt_packages:
#       - git
#     pip_packages:
#       - docker
#       - docker-compose
#   when: requires_nested_docker

# - name: Install pip if required
#   ansible.builtin.set_fact:
#     apt_packages: [python3-pip]
#   when: pip_packages


### APT
- name: Install apt packages
  block:

    ### Squid cache
    - name: Enable squid apt caching
      vars:
        squid_http_protocol: "{{ hostvars['squid'].http_protocol }}"
        squid_ip: "{{ hostvars['squid'].ip }}"
        squid_port: "{{ hostvars['squid'].port }}"
        squid_socket: "{{ squid_http_protocol }}://{{ squid_ip }}:{{ squid_port }}"
      ansible.builtin.copy:
        content: Acquire::http::Proxy "{{ squid_socket }}";
        dest: /etc/apt/apt.conf.d/00proxy
        owner: root
        group: root
        mode: "644"
      when: not disable_squid_deb_proxy

    - name: Update apt mirrors
      ansible.builtin.replace:
        path: /etc/apt/sources.list
        regexp: http://archive.ubuntu.com
        replace: http://au.archive.ubuntu.com

    # - name: Reconfigure DPKG
    #   ansible.builtin.command: dpkg --configure -a
    #   register: dpkg_configure
    #   changed_when: dpkg_configure.rc != 0

    - name: Update apt package list
      ansible.builtin.apt:
        update_cache: true

    - name: Install apt packages
      ansible.builtin.apt:
        pkg: "{{ apt_packages }}"

    # - name: "Upgrade apt packages"
    #   ansible.builtin.apt:
    #     upgrade: true


    # ### Docker
    # ### NOTE: This whole mess is JUST to get "docker compose" v2
    # ### https://docs.docker.com/engine/install/ubuntu/#set-up-the-repository
    # - name: Install docker repo & packages
    #   when: (requires_nested_docker) or (inventory_hostname == "squid") ### Allow squid to cache docker apt repo
    #   block:
    #     # - name: Install docker repo prerequisites
    #     #   ansible.builtin.apt:
    #     #     pkg:
    #     #       - ca-certificates
    #     #       - curl
    #     #       - gnupg

    #     # - name: Add Docker's GPG key
    #     #   ansible.builtin.shell:
    #     #     executable: /bin/bash
    #     #     cmd: |
    #     #       set -o pipefail
    #     #       sudo install -m 0755 -d /etc/apt/keyrings
    #     #       curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    #     #       sudo chmod a+r /etc/apt/keyrings/docker.gpg
    #     #   register: add_docker_gpg_key
    #     #   changed_when: add_docker_gpg_key.rc != 0

    #     # - name: Add Docker apt repo
    #     #   ansible.builtin.shell:
    #     #     executable: /bin/bash
    #     #     cmd: |
    #     #       set -o pipefail
    #     #       echo \
    #     #         "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    #     #         "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
    #     #         sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    #     #   register: add_docker_apt_repo
    #     #   changed_when: add_docker_apt_repo.rc != 0

    #     # - name: Fetch new package info from Docker repo
    #     #   ansible.builtin.apt:
    #     #     update_cache: true

    #     # - name: Install packages from docker repo
    #     #   ansible.builtin.apt:
    #     #     pkg:
    #     #       - docker-ce
    #     #       - docker-ce-cli
    #     #       - containerd.io
    #     #       - docker-buildx-plugin
    #     #       - docker-compose-plugin
    #     #       - python3-pip ### Sneaking this one in before it's needed
    #     #   when: requires_nested_docker ### Exclude squid


### Pip
- name: Install pip packages
  when: pip_packages
  block:

    - name: Find local python3 version
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          ls /usr/bin/python3.* | head -n1
      register: local_python3_bin
      changed_when: local_python3_bin.rc != 0

    # - name: Set local python3 version as fact
    #   ansible.builtin.set_fact:
    #     local_python3_bin: "{{ local_python3_bin.stdout }}"

    - name: Upgrade pip
      ansible.builtin.command:
        "{{ local_python3_bin.stdout }} -m pip install -U pip setuptools wheel"
      register: upgrade_pip
      changed_when: upgrade_pip.rc != 0

    - name: Install pip packages
      ansible.builtin.pip:
        name: "{{ pip_packages }}"
      when: pip_packages is defined

    # - name: Install pip packages for docker-compose
    #   ansible.builtin.pip:
    #     name: "{{ pip_packages }}"
    #   when: requires_nested_docker
