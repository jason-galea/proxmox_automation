---
- name: Set SSH host(s)
  hosts: prox, pihole
  gather_facts: false
  vars:
    use_ip_not_dns_name: true
  roles:
    - set-ssh-host


- name: Migrate Proxmox to backup DNS
  hosts: prox
  gather_facts: false
  vars:
    resolv: /etc/resolv.conf
  tasks:

    - name: Update DNS settings on prox {{ resolv }}
      vars:
        new_domain: "{{ domain }}"
        new_dns: "{{ backup_dns }}"
      ansible.builtin.template:
        src: templates/resolv.conf.j2
        dest: "{{ resolv }}"
        mode: "644"


- name: Apply new dns server to CTs via restart
  # hosts: cts
  hosts: pihole
  gather_facts: false
  tasks:

    - name: Check if ct exists
      delegate_to: prox
      ansible.builtin.command: pct status {{ id }}
      register: pct_status_id
      changed_when: pct_status_id.rc != 0
      failed_when: false

    - name: Restart CTs
      loop:
        - stop
        - start
      ansible.builtin.include_role:
        name: prox-lxc
        tasks_from: "{{ item }}"
      when: pct_status_id.rc == 0 ### RC of 2 means CT does not exist


- name: Create Pihole container & install
  hosts: pihole
  gather_facts: false
  # vars:
  #   use_ip_not_dns_name: true
  tasks:

    - name: Include role 'prox-lxc'
      ansible.builtin.include_role:
        name: prox-lxc

    - name: Check if pihole webserver is active
      ansible.builtin.wait_for:
        port: "{{ port }}"
        timeout: 3
      register: wait_for_pihole_webserver
      failed_when: false ### Ignore fails, we just want the return code

    - name: Install pihole
      when: not ((wait_for_pihole_webserver.state is defined) and (wait_for_pihole_webserver.state != 'started'))
      block:

        - name: Clone pihole git repo ### stoopid warnings
          ansible.builtin.git:
            repo: "{{ homelab_git_url }}/{{ infra_repo_name }}.git"
            dest: /root/{{ infra_repo_name }}

        - name: Stop 'systemd-resolved' service
          ansible.builtin.systemd:
            name: systemd-resolved
            state: stopped
            enabled: false

        - name: Docker compose up
          community.docker.docker_compose:
            project_src: /root/{{ infra_repo_name }}


- name: Verify new DNS server from localhost
  hosts: localhost
  gather_facts: false
  tasks:

    - name: Verify A records
      ansible.builtin.command: nslookup test.galea.lan {{ dns }} ### TODO: make dynamic
      register: verify_a_records
      changed_when: verify_a_records.rc != 0
      failed_when: verify_a_records.rc != 0

    - name: Verify CNAME records
      ansible.builtin.command: nslookup bookstack.jasongalea.net {{ dns }} ### TODO: make dynamic
      register: verify_cname_records
      changed_when: verify_cname_records.rc != 0
      failed_when: verify_cname_records.rc != 0
      # when: hostvars[item].cname is defined


- name: Migrate Proxmox to new DNS
  hosts: prox
  gather_facts: false
  vars:
    resolv: /etc/resolv.conf
  tasks:

    - name: Update DNS settings on prox {{ resolv }}
      vars:
        new_domain: "{{ domain }}"
        new_dns: "{{ dns }}"
      ansible.builtin.template:
        src: templates/resolv.conf.j2
        dest: "{{ resolv }}"
        mode: "644"


### NOTE: Assuming CTs aren't restarted during this playbook, they should still have the correct DNS IP.
- name: Apply new dns server to CTs via restart
  hosts: cts
  gather_facts: false
  tasks:

    - name: Check if ct exists
      delegate_to: prox
      ansible.builtin.command: pct status {{ id }}
      register: pct_status_id
      changed_when: false
      failed_when: false

    - name: Restart CTs
      loop:
        - stop
        - start
      ansible.builtin.include_role:
        name: prox-lxc
        tasks_from: "{{ item }}"
      when: pct_status_id.rc == 0 ### RC of 2 means CT does not exist


- name: Wait for Pihole to respond on port 53
  hosts: pihole
  gather_facts: false
  tasks:
    - name: Wait for Pihole to respond on port 53
      ansible.builtin.wait_for:
        port: 53
        delay: 3


- name: Verify new DNS server from squid
  hosts: squid
  gather_facts: false
  tasks:


    - name: Verify A records
      ansible.builtin.command: nslookup test.galea.lan {{ dns }} ### TODO: make dynamic
      register: verify_a_records
      changed_when: verify_a_records.rc != 0
      failed_when: verify_a_records.rc != 0

    - name: Verify CNAME records
      ansible.builtin.command: nslookup bookstack.jasongalea.net {{ dns }} ### TODO: make dynamic
      register: verify_cname_records
      changed_when: verify_cname_records.rc != 0
      failed_when: verify_cname_records.rc != 0
