---
- name: "Create base CT template"
  ansible.builtin.import_playbook: create_base_ct_template.yml

- name: "Create pihole CT"
  hosts: pihole
  gather_facts: false
  tasks:

    - name: "Create pihole container"
      ansible.builtin.include_role:
        name: create_ct

    - name: "Install pihole"
      loop:
        - end_play_if_installed
        - install
      ansible.builtin.include_role:
        name: pihole
        tasks_from: "{{ item }}"


### Populate records
- name: "Add DNS records to Pihole"
  hosts: pihole
  gather_facts: false
  vars:
    a_records_file: /etc/pihole/custom.list
    cname_records_file: /etc/dnsmasq.d/05-pihole-custom-cname.conf
  tasks:

    ### A records
    - name: "Create/wipe A records file"
      ansible.builtin.copy:
        content: ""
        dest: "{{ a_records_file }}"
        force: true

    - name: "Populate A records file" ### E.G: "1.2.3.4 a.test.lan"
      loop: "{{ groups['all']  }}"
      ansible.builtin.lineinfile:
        dest: "{{ a_records_file }}"
        line: "{{ hostvars[item].ip }} {{ hostvars[item].fqdn }}"

    # - name: "DEBUG: Fetch A records"
    #   ansible.builtin.command: "cat {{ a_records_file }}"
    #   register: fetch_a_records

    # - name: "DEBUG: Show A records"
    #   ansible.builtin.debug:
    #     var: fetch_a_records.stdout_lines


    ### CNAME records
    - name: "Create/wipe CNAME records file"
      ansible.builtin.copy:
        content: ""
        dest: "{{ cname_records_file }}"
        force: true

    - name: "Populate CNAME records file" ### E.G: "cname=cname.test.lan,a.test.lan"
      loop: "{{ groups['all'] }}"
      when: hostvars[item].cname is defined
      ansible.builtin.lineinfile:
        dest: "{{ cname_records_file }}"
        line: "cname={{ hostvars[item].cname }},{{ hostvars[item].fqdn }}"

    # - name: "DEBUG: Fetch CNAME records"
    #   ansible.builtin.command: "cat {{ cname_records_file }}"
    #   register: fetch_cname_records

    # - name: "DEBUG: Show CNAME records"
    #   ansible.builtin.debug:
    #     var: fetch_cname_records.stdout_lines


    ### Restart
    - name: "Restart DNS"
      ansible.builtin.command: "pihole restartdns"


    ### Verify
    - name: "Verify A records from localhost"
      delegate_to: localhost
      loop: "{{ groups['all']  }}"
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          nslookup {{ hostvars[item].fqdn }} {{ dns }} | grep '{{ hostvars[item].ip }}'
        executable: /bin/bash
      register: verify_a_records
      failed_when: "verify_a_records.stdout == ''"

    - name: "Verify CNAME records from localhost"
      delegate_to: localhost
      loop: "{{ groups['all'] }}"
      when: hostvars[item].cname is defined
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          nslookup {{ hostvars[item].cname }} {{ dns }} | grep '^{{ hostvars[item].cname }}'
        executable: /bin/bash
      register: verify_cname_records
      failed_when: "verify_cname_records.stdout == ''"


# ### Apply DNS to hosts
# - name: "Apply DNS and verify"
#   hosts: prox
#   gather_facts: false
#   vars:
#     resolv: "/etc/resolv.conf"
#   tasks:

#     ### Check
#     # - block:
#     #   - name: "Check if DNS is already working from hosts"
#     #     loop: "{{ groups['all']  }}"
#     #     ansible.builtin.shell: "nslookup {{ hostvars[item].fqdn }} | grep Name | awk '{print $2}'"
#     #     register: verify
#     #     failed_when: "verify.stdout != hostvars[item].fqdn"
#     #     no_log: true

#     #   - name: "PASS: Skipping..."
#     #     ansible.builtin.meta: end_play
#     #   rescue:
#     #   - name: "FAIL: Continuing to update host DNS settings"
#     #     ansible.builtin.meta: noop

#     - name: "Backup /etc/resolv.conf"
#       ansible.builtin.copy:
#         remote_src: true
#         src: "{{ resolv }}"
#         dest: "{{ resolv }}.bak"
#         force: true
#       # become: true

#     - name: "Set DNS server to pihole"
#       ansible.builtin.shell: |
#         sed -i 's/.*nameserver.*/nameserver {{ hostvars['pihole'].ansible_ssh_host }}/' {{ resolv }}
#       # become: true

#     ### Verify from hosts
#     # - ansible.builtin.command: "cat {{ resolv }}"
#     #   register: cat_resolv
#     # - name: "Display /etc/resolv.conf"
#     #   ansible.builtin.debug:
#     #     var: cat_resolv.stdout

#     # - name: "Verify DNS from hosts"
#     #   loop: "{{ groups['all']  }}"
#     #   ansible.builtin.shell: "nslookup {{ hostvars[item].fqdn }} | grep Name | awk '{print $2}'"
#     #   register: verify
#     #   failed_when: "verify.stdout != hostvars[item].fqdn"
