---
- name: Set SSH host(s)
  hosts: prox, pihole
  gather_facts: false
  vars:
    use_ip_not_dns_name: true
  roles:
    - get-ssh-host


- name: Create Pihole container & install
  hosts: pihole
  gather_facts: false
  vars:
    use_ip_not_dns_name: true
  tasks:

    - name: Include role 'prox-lxc'
      ansible.builtin.include_role:
        name: prox-lxc

    # - name: Include role 'pihole'
    #   ansible.builtin.include_role:
    #     name: pihole

    - name: "Check if pihole webserver is active"
      ansible.builtin.wait_for:
        port: "{{ port }}"
        timeout: 3
      register: wait_for_pihole_webserver
      failed_when: false ### Ignore fails, we just want the return code

    # - debug:
    #     var: wait_for_pihole_webserver

    - name: Install pihole
      when: not ((wait_for_pihole_webserver.state is defined) and (wait_for_pihole_webserver.state != 'started'))
      block:

        # - name: Clone pihole git repo
        #   ansible.builtin.git:
        #     repo: "{{ homelab_git_url }}/{{ infra_repo_name }}.git"
        #     dest: /root/{{ infra_repo_name }}


        - name: Docker compose up
          community.docker.docker_compose:
            project_src: /root/{{ infra_repo_name }}


- name: Verify new DNS server from localhost
  hosts: localhost
  gather_facts: false
  tasks:

    - name: Verify A records
      loop: "{{ groups['all'] }}"
      ansible.builtin.command: nslookup {{ hostvars[item].fqdn }} {{ dns }}
      register: verify_a_records
      changed_when: verify_a_records.rc != 0
      failed_when: verify_a_records.rc != 0

    - name: Verify CNAME records
      loop: "{{ groups['all'] }}"
      ansible.builtin.command: nslookup {{ hostvars[item].cname }}
      register: verify_cname_records
      changed_when: verify_cname_records.rc != 0
      failed_when: verify_cname_records.rc != 0
      when: hostvars[item].cname is defined


# - name: Apply new DNS server to prox
#   hosts: prox
#   gather_facts: false
#   tasks:

#     ### NOTE: Vars 'domain' and 'dns' are set in the inventory
#     - name: Include role 'pihole' with tasks from 'update_resolv_conf'
#       ansible.builtin.include_role:
#         name: pihole
#         tasks_from: update_resolv_conf


# - name: Apply new dns server to CTs, by restarting Proxmox
#   hosts: prox
#   gather_facts: false
#   tasks:

#     - name: "Restart Proxmox"
#       ansible.builtin.reboot:

#     - name: Include role 'verify_webserver'
#       ansible.builtin.include_role:
#         name: verify_webserver

- name: Apply new dns server to CTs via restart
  hosts: cts
  gather_facts: false
  tasks:

    - name: Check if ct exists
      delegate_to: prox
      ansible.builtin.command: pct status {{ id }}
      register: pct_status_id
      changed_when: pct_status_id.rc != 0
      failed_when: false

    - name: Restart CTs
      when: pct_status_id.rc == 0 ### RC of 2 means CT does not exist
      block:

        - name: Stop CTs
          ansible.builtin.include_role:
            name: prox-lxc
            tasks_from: stop

        - name: Start CTs
          ansible.builtin.include_role:
            name: prox-lxc
            tasks_from: start


# - name: Verify new DNS server from localhost
#   hosts: localhost
#   gather_facts: false
#   tasks:

#     - name: Verify A records
#       loop: "{{ groups['all'] }}"
#       ansible.builtin.command: nslookup {{ hostvars[item].fqdn }}
#       register: verify_a_records
#       changed_when: verify_a_records.rc != 0
#       failed_when: verify_a_records.rc != 0

#     - name: Verify CNAME records
#       loop: "{{ groups['all'] }}"
#       ansible.builtin.command: nslookup {{ hostvars[item].cname }}
#       register: verify_cname_records
#       changed_when: verify_cname_records.rc != 0
#       failed_when: verify_cname_records.rc != 0
#       when: hostvars[item].cname is defined


# - name: Verify SSH connection to Proxmox with DNS name
#   hosts: prox
#   gather_facts: false
#   tasks:

#     - name: Set Proxmox SSH host to DNS name
#       ansible.builtin.include_role:
#         name: get-ssh-host

#     # - name: Run dummy command 'id'
#     #   ansible.builtin.command: id
#     #   register: id_result
#     #   changed_when: id_result.rc != 0

#     # - name: Show dummy command output
#     #   ansible.builtin.debug:
#     #     var: id_result.stdout

#     - name: Include role 'verify_webserver'
#       ansible.builtin.include_role:
#         name: verify_webserver
