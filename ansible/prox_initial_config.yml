---
- name: "Prepare Proxmox for SSH"
  hosts: prox
  gather_facts: false
  tasks:
    - name: "Check if ansible can connect to Proxmox already"
      ansible.builtin.ping:
      register: ansible_ping_result

    # - name: "DEBUG: ansible_ping_result"
    #   ansible.builtin.debug:
    #     var: ansible_ping_result.ping

    - name: "Configure SSH access to Proxmox"
      delegate_to: localhost
      vars:
        prox_user: "{{ hostvars['prox'].ansible_user }}"
        prox_ip: "{{ hostvars['prox'].ansible_ssh_host }}"
      when: ansible_ping_result.ping != "pong"
      block:
        - name: "Remove any existing SSH keys belonging to Proxmox from localhost"
          ansible.builtin.command: "ssh-keygen -R {{ prox_ip }}"
          register: remove_old_prox_key_result
          changed_when: remove_old_prox_key_result != 0

        - name: "Ignore strict host key checking"
          ansible.builtin.set_fact:
            ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

        - name: "Exchange SSH keys with Proxmox"
          ansible.builtin.command: |
            sshpass -f ./../password.txt \
              ssh-copy-id {{ prox_user }}@{{ prox_ip }}
          register: ssh_copy_id_result
          changed_when: ssh_copy_id_result != 0


- name: "Configure Proxmox"
  hosts: prox
  gather_facts: false
  tasks:
  #   - name: "DEBUG: Run 'id' command on Proxmox"
  #     ansible.builtin.command: "id"
  #     register: id_command_result
  #     changed_when: id_command_result != 0

  #   - name: "DEBUG: Show 'id' command output"
  #     ansible.builtin.debug:
  #       var: id_command_result.stdout

    - name: "Verify DNS & internet via ping"
      ansible.builtin.command: "ping -c 3 example.com"
      register: ping_result
      changed_when: ping_result != 0

    - name: "DEBUG: Show ping output"
      ansible.builtin.debug:
        var: ping_result.stdout_lines

    - name: "Detect debian version nickname"
      ansible.builtin.shell: |
        set pipefail
        cat /etc/apt/sources.list | head -n1 | awk '{print $3}'
      register: debian_version_nickname_result
      changed_when: debian_version_nickname_result != 0

    - name: "DEBUG: Show debian version nickname"
      ansible.builtin.debug:
        var: debian_version_nickname_result.stdout

    - name: "Disable enterprise repo list"
      vars:
        debian_nickname: "{{ debian_version_nickname_result.stdout }}"
      ansible.builtin.template:
        src: "templates/pve-enterprise.list.j2"
        dest: "/etc/apt/sources.list.d/pve-enterprise.list"
        owner: root
        group: root
        mode: "644"

    - name: "Add non-subscription repo"
      vars:
        debian_nickname: "{{ debian_version_nickname_result.stdout }}"
      ansible.builtin.template:
        src: "templates/sources.list.j2"
        dest: "/etc/apt/sources.list"
        owner: root
        group: root
        mode: "644"

    - name: "Update & upgrade"
      ansible.builtin.apt:
        upgrade: true
        update_cache: true
      register: apt_upgrade_result

    - name: "DEBUG: Show apt upgrade output"
      ansible.builtin.debug:
        var: apt_upgrade_result.stdout_lines
      # when: apt_upgrade_result.stdout_lines is defined

      ### Download most recent ubuntu CT template
    - name: "Update PVEAM"
      ansible.builtin.command: "pveam update"
      register: pveam_update
      changed_when: pveam_update != 0

    - name: "DEBUG: Show PVEAM update output"
      ansible.builtin.debug:
        var: pveam_update.stdout_lines
      when: pveam_update.stdout_lines is defined

    - name: "Find most recent ubuntu CT template"
      ansible.builtin.shell: |
        set pipefail
        pveam available | grep ubuntu | awk '{print $2}' | sort | tail -n 1
      register: find_most_recent_ct
      changed_when: find_most_recent_ct != 0

    - name: "DEBUG: Show most recent ubuntu CT template"
      ansible.builtin.debug:
        var: find_most_recent_ct.stdout
      when: find_most_recent_ct.stdout is defined

    - name: "Download most recent ubuntu CT template"
      ansible.builtin.command: "pveam download local {{ find_most_recent_ct.stdout }}"
      register: download_ct_template
      changed_when: download_ct_template.rc != 0

    - name: "DEBUG: Show download output"
      ansible.builtin.debug:
        var: download_ct_template.stdout_lines
      when: download_ct_template.stdout_lines is defined

    - name: "DEBUG: Show Proxmox webserver URL"
      ansible.builtin.debug:
        msg: "https://{{ ansible_host }}:{{ port }}"

    - name: "Verify Proxmox webserver is active"
      ansible.builtin.wait_for:
        port: "{{ port }}"
        timeout: 10
