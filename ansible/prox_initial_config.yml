---
- name: "Configure Proxmox"
  hosts: prox
  gather_facts: false
  tasks:

    ### SSH
    # - name: "Configure SSH access to Proxmox"
    #   # delegate_to: localhost
    #   # vars:
    #   #   prox_user: "{{ hostvars['prox'].ansible_user }}"
    #   #   prox_ip: "{{ hostvars['prox'].ansible_ssh_host }}"
    #   block:
    #     # - name: "Remove any existing SSH keys belonging to Proxmox from localhost"
    #     #   delegate_to: localhost
    #     #   ansible.builtin.command: "ssh-keygen -R {{ prox_ip }}"
    #     #   register: remove_existing_key
    #     #   changed_when: remove_existing_key != 0

    #     - name: "Add Proxmox SSH key to known hosts"
    #       delegate_to: localhost
    #       ansible.builtin.shell:
    #         cmd: |
    #           set -o pipefail
    #           ssh-keyscan -H {{ ansible_ssh_host }} >> ~/.ssh/known_hosts
    #         executable: /bin/bash
    #       register: add_to_known_hosts
    #       changed_when: add_to_known_hosts.rc != 0

    #     # - name: "Install localhost SSH key on Proxmox"
    #     #   delegate_to: localhost
    #     #   ansible.builtin.command: |
    #     #     sshpass -f ./../password.txt \
    #     #       ssh-copy-id {{ ansible_user }}@{{ prox_ip }}
    #     #   register: ssh_copy_id_result
    #     #   changed_when: ssh_copy_id_result != 0

    #     # - name: "Install localhost SSH key on Proxmox"
    #     #   delegate_to: localhost
    #     #   ansible.posix.authorized_key:
    #     #     user: root
    #     #     key: "{{ lookup('file', ssh_key_path) }}"
    #     #     state: present
    - name: "Configure SSH access to Proxmox"
      loop:
        - remove
        - scan
        - create
        - install
      ansible.builtin.include_role:
        name: ssh
        tasks_from: "{{ item }}"


    ### DEBUG
    # - name: "DEBUG: Run 'id' command on Proxmox"
    #   ansible.builtin.command: "id"
    #   register: id_command_result
    #   changed_when: id_command_result != 0

    # - name: "DEBUG: Show 'id' command output"
    #   ansible.builtin.debug:
    #     var: id_command_result.stdout

    ### Check internet
    - name: "Verify DNS & internet via ping"
      ansible.builtin.command: "ping -c 3 example.com"
      register: ping_result
      changed_when: ping_result != 0

    - name: "DEBUG: Show ping output"
      ansible.builtin.debug:
        var: ping_result.stdout_lines


    # ### Non-subscription repo
    # - name: "Detect debian version nickname"
    #   ansible.builtin.shell:
    #     cmd: |
    #       set -o pipefail
    #       cat /etc/apt/sources.list | head -n1 | awk '{print $3}'
    #     executable: /bin/bash
    #   register: debian_version_nickname_result
    #   changed_when: debian_version_nickname_result != 0

    # # - name: "DEBUG: Show debian version nickname"
    # #   ansible.builtin.debug:
    # #     var: debian_version_nickname_result.stdout

    # - name: "Disable enterprise repo list"
    #   vars:
    #     debian_nickname: "{{ debian_version_nickname_result.stdout }}"
    #   ansible.builtin.template:
    #     src: "templates/pve-enterprise.list.j2"
    #     dest: "/etc/apt/sources.list.d/pve-enterprise.list"
    #     owner: root
    #     group: root
    #     mode: "644"

    # - name: "Add non-subscription repo"
    #   vars:
    #     debian_nickname: "{{ debian_version_nickname_result.stdout }}"
    #   ansible.builtin.template:
    #     src: "templates/sources.list.j2"
    #     dest: "/etc/apt/sources.list"
    #     owner: root
    #     group: root
    #     mode: "644"

    # - name: "Update & upgrade"
    #   ansible.builtin.apt:
    #     upgrade: true
    #     update_cache: true
    #   register: apt_upgrade_result

    # # - name: "DEBUG: Show apt upgrade output"
    # #   ansible.builtin.debug:
    # #     var: apt_upgrade_result.stdout_lines
    # #   # when: apt_upgrade_result.stdout_lines is defined


    # ### Download most recent ubuntu CT template
    # - name: "Update PVEAM"
    #   ansible.builtin.command: "pveam update"
    #   register: pveam_update
    #   changed_when: pveam_update != 0

    # - name: "DEBUG: Show PVEAM update output"
    #   ansible.builtin.debug:
    #     var: pveam_update.stdout_lines
    #   when: pveam_update.stdout_lines is defined

    # - name: "Find most recent ubuntu CT template"
    #   ansible.builtin.shell:
    #     cmd: |
    #       set -o pipefail
    #       pveam available | grep ubuntu | awk '{print $2}' | sort | tail -n 1
    #     executable: /bin/bash
    #   register: find_most_recent_ct
    #   changed_when: find_most_recent_ct != 0

    # - name: "DEBUG: Show most recent ubuntu CT template"
    #   ansible.builtin.debug:
    #     var: find_most_recent_ct.stdout
    #   when: find_most_recent_ct.stdout is defined

    # - name: "Download most recent ubuntu CT template"
    #   ansible.builtin.command: "pveam download local {{ find_most_recent_ct.stdout }}"
    #   register: download_ct_template
    #   changed_when: download_ct_template.rc != 0

    # - name: "DEBUG: Show download output"
    #   ansible.builtin.debug:
    #     var: download_ct_template.stdout_lines
    #   when: download_ct_template.stdout_lines is defined

    # - name: "DEBUG: Show Proxmox webserver URL"
    #   ansible.builtin.debug:
    #     msg: "https://{{ ansible_host }}:{{ port }}"


    # ### MISC
    # - name: "MISC: Reduce grub boot delay to 2 seconds"
    #   ansible.builtin.lineinfile:
    #     path: /etc/default/grub
    #     regexp: '^GRUB_TIMEOUT=5'
    #     line: 'GRUB_TIMEOUT=2'

    # - name: "MISC: Regenerate grub config"
    #   ansible.builtin.command: "update-grub"
    #   register: update_grub
    #   changed_when: update_grub.rc != 0

    # - name: "MISC: Disable lid-close actions"
    #   loop:
    #     - { regexp: '^#HandleLidSwitch=suspend', line: 'HandleLidSwitch=ignore' }
    #     - { regexp: '^#HandleLidSwitchExternalPower=suspend', line: 'HandleLidSwitchExternalPower=ignore' }
    #     - { regexp: '^#HandleLidSwitchDocked=ignore', line: 'HandleLidSwitchDocked=ignore' }
    #   ansible.builtin.lineinfile:
    #     path: /etc/systemd/logind.conf
    #     regexp: "{{ item.regexp }}"
    #     line: "{{ item.line }}"

    # - name: "MISC: Disable terminal beep"
    #   ansible.builtin.lineinfile:
    #     path: /etc/inputrc
    #     regexp: "^# set bell-style none"
    #     line: "set bell-style none"

    # - name: "MISC: Restart Proxmox to apply changes"
    #   ansible.builtin.reboot:


    # ### END
    # - name: "Verify Proxmox webserver is active"
    #   ansible.builtin.wait_for:
    #     port: "{{ port }}"
    #     timeout: 10
