# ansible-playbook -i inv.yml services/pihole.yml

# Expects host "pihole" to be deployed according to inv.yml

---
- name: "Deploy Pihole (via setupVars.conf) "
  hosts: pihole
  gather_facts: no

  vars:
    pkg_name: "git"
    repo_dir: "/home/{{ user }}/pihole"
    # repo_script: "{{ repo_dir }}/automated install/basic-install.sh"
    repo_script: "{{ repo_dir }}/automated\\ install/basic-install.sh"
    answers_dir: "/etc/pihole"
    answers_file: "{{ answers_dir }}/setupVars.conf"
    password: "{{ lookup('file', '../../password.txt') }}" # I hate this and myself

  tasks:
    # Check and install git, print output
  - name: Gather package facts
    package_facts:
      manager: auto
  - name: "Install git if not present"
    apt:
      pkg: git
      update_cache: yes
      state: latest
    become: yes
    register: install_git
    when: "'git' not in ansible_facts.packages"
  - debug:
      var: install_git.stdout
    when: install_git.stdout is defined

    ### Clone repo
  - name: "Clone pihole git repo"
    ansible.builtin.git:
      repo: "https://github.com/pi-hole/pi-hole.git"
      dest: "{{ repo_dir }}"
      depth: 1
      version: "v5.8.1" # Need specific release for line numbers in basic-install.sh
      force: yes # To override below modifications on re-runs

    ### Run Pihole install script (MANUAL):
      # https://docs.pi-hole.net/main/basic-install/
      # sudo bash basic-install.sh
      ### Steps for interactive install script:
      ### (Items starting with "# DONE " are accounted for in setupVars.conf)
      # DONE # 1. "OK"
      # DONE # 2. "OK"
      # DONE # 3. Static IP? --> "YES"
      # DONE # 4. Upstream DNS? --> Cloudflare (DNSSEC) --> (TAB) --> "OK"
      # 5. Block list? --> (TAB to accept default "StevenBlacks") --> "OK"
      # DONE # 6. Do you want a web interface? --> (TAB to accept default "ON") --> "OK"
      # 7. Install lighttpd? --> (TAB to accept default "ON") --> "OK"
      # DONE # 8. Log queries? --> (TAB to accept default "ON") --> "OK"
      # 9. Privacy mode? --> (TAB to accept default "0 Show Everything") --> "OK"
      ### More info: (https://docs.pi-hole.net/ftldns/privacylevels/)
      ### ...wait for script to finish...
      # DONE # 10. Install complete! --> "OK"
    ### Run Pihole install script (SETUPVARS)
    # https://discourse.pi-hole.net/t/pi-hole-as-part-of-a-post-installation-script/3523
    # https://discourse.pi-hole.net/t/what-is-setupvars-conf-and-how-do-i-use-it/3533
  - name: "Create /etc/pihole"
    file:
      path: "{{ answers_dir }}"
      state: directory
    become: yes
  - name: "Populate {{ answers_file }}"
    # shell: |
    #   echo -n {{ password }} | sha256sum | awk '{print $1}' | sha256sum | awk '{print $1}' > {{ answers_file }}
    #   echo "WEBPASSWORD=$(cat {{ answers_file }})" > {{ answers_file }}
    #   echo "IPV4_ADDRESS=172.26.0.161/24" >> {{ answers_file }}
    shell: |
      echo "IPV4_ADDRESS=172.26.0.161/24" > {{ answers_file }}
      echo "QUERY_LOGGING=true" >> {{ answers_file }}
      echo "INSTALL_WEB=true" >> {{ answers_file }}
      echo "PIHOLE_DNS_1=1.1.1.1" >> {{ answers_file }}
      echo "PIHOLE_DNS_2=1.0.0.1" >> {{ answers_file }}
      echo "DNSSEC=true" >> {{ answers_file }}
      echo "TEMPERATUREUNIT=C" >> {{ answers_file }}
    become: yes

  - command: "cat {{ answers_file }}"
    register: answers
  - name: "Display {{ answers_file }}"
    debug:
      var: answers.stdout

    # This is reeeaaally screwy, and changes with each pihole release
  - name: "Modify script to remove interactive prompt"
    shell: |
      mv {{ repo_script }} {{ repo_script }}.bak
      echo "$(head -1953 {{ repo_script }}.bak)" > {{ repo_script }}
      echo "    useUpdateVars=true" >> {{ repo_script }}
      echo "$(tail -678 {{ repo_script }}.bak)" >> {{ repo_script }}

    ### Install
    # cd "Pi-hole/automated install/"
    # sudo bash basic-install.sh
    ### TODO: Test if "cd && bash" or just "bash" makes any difference
  - name: "Install Pihole (Can take 3-5 minutes) "
    command: "bash {{ repo_script }}" # "bash" bypasses permissions issues
    become: yes
    register: install_pihole
  - debug:
      var: install_pihole.stdout

  # - name: "Display password"
  #   debug:
  #     msg: "echo {{ install_pihole.stdout_lines[-item] }}"
  #   with_items: [11,10,9]

  - name: "Set password"
    command: "pihole -a -p {{ password }}"
    become: yes
    register: password
  - debug:
      var: password.stdout
  
  - name: "Verify webserver at http://{{ ansible_host }}/admin"
    # uri:
    #   # url: "http://{{ ansible_host }}:{{ port }}" #
    #   url: "http://{{ ansible_host }}/admin"
    #   delay: 3
    wait_for:
      port: "{{ port }}"
    retries: 3
    delay: 3