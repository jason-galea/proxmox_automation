# ansible-playbook -i inv.yml services/pihole.yml

# Expects host "pihole" to be deployed according to inv.yml

---
- name: "Deploy Pihole (via docker) "
  hosts: pihole
  gather_facts: no

  vars:
    # setupvars: "/etc/pihole/setupVars.conf"
    repo_dir: "/home/{{ user }}/docker-pi-hole"
    repo_compose: "{{ repo_dir }}/docker-compose.yml"

  tasks:

  ### https://docs.docker.com/engine/install/ubuntu/
  - name: Gather package facts
    package_facts:
      manager: auto

  - name: "Install prerequisites"
    apt:
      pkg:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - git
      update_cache: yes
      state: latest
    become: yes
    register: install_prereqs
    when: "'git' not in ansible_facts.packages"
  - debug:
      var: install_prereqs.stdout
    when: install_prereqs.stdout is defined

    # TODO: Check if GPG key already exists
  - name: "Add docker GPG key"
    vars:
      gpg_file: /usr/share/keyrings/docker-archive-keyring.gpg
    shell: |
      rm -f {{ gpg_file }} 2>/dev/null
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o {{ gpg_file }}
    become: yes
    # when: 
    
    # TODO: Check if source file already exists
  - name: "Add docker source list"
    shell: |
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    become: yes
    # when: 
    
  - name: "Gather package facts (again)"
    package_facts:
      manager: auto

  - name: "Install docker & docker-compose"
    apt:
      pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose
      update_cache: yes
      state: latest
    become: yes
    register: install_docker
    when: "'docker-compose' not in ansible_facts.packages"
  - debug:
      var: install_docker.stdout
    when: install_docker.stdout is defined

  ### Steps to set up pihole in docker
  ### https://hub.docker.com/r/pihole/pihole
  ### https://github.com/pi-hole/docker-pi-hole
  - name: "Clone pihole git repo"
    git:
      repo: "https://github.com/pi-hole/docker-pi-hole.git"
      dest: "{{ repo_dir }}"
      force: yes

  - name: "Copy example docker-compose.yml"
    copy:
      src: "{{ repo_compose }}.example"
      dest: "{{ repo_compose }}"
      remote_src: yes

  - name: "Add timezone and password to docker-compose.yml"
    shell: |
      sed -i "s/.*TZ:.*/      TZ: 'Australia\/Melbourne'/" {{ repo_compose }}
      sed -i "s/.*WEBPASSWORD:.*/      WEBPASSWORD: 'abc##123'/" {{ repo_compose }}

  # - name: "Apply ubuntu fixes for docker"
  #   shell: |
  #     sed -r -i.orig 's/#?DNSStubListener=yes/DNSStubListener=no/g' /etc/systemd/resolved.conf
  #     sh -c 'rm /etc/resolv.conf && ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf'
  #     systemctl restart systemd-resolved
  #   become: yes
  
  - name: "Stop and disable systemd-resolved"
    shell: |
      systemctl stop systemd-resolved
      systemctl disable systemd-resolved
    become: yes

  - name: "Compose docker image"
    docker_compose:
      project_src: "{{ repo_dir }}"
      # files: "{{}}"
    become: yes
    register: docker_compose
  - debug:
      var: docker_compose

  # - name: "Run docker image"
  #   docker_container:
  #     name: "pihole"
  #     project_src: "{{ repo_dir }}"
  #   register: docker_run
  # - debug:
  #     var: docker_run


  # - name: "Verify webserver"
  #   uri:
  #     # url: "http://{{ ansible_host }}:{{ port }}" #
  #     url: "http://{{ ansible_host }}/admin"
  #     delay: 3

  # TODO: Start docker image at boot

  # - name: "Verify DNS from Pihole"

  # - name: "Change Proxmox DNS server to pihole"

  # - name: "Verify DNS from Proxmox"

