---
- name: "Backup {{ a_records_file }}"
  hosts: pihole
  gather_facts: no
  become: yes
  vars:
    a_records_file: "/etc/pihole/custom.list"
    # cname_records_file: "/etc/dnsmasq.d/05-pihole-custom-cname.conf"
  tasks:
  - copy:
      src: "{{ a_records_file }}"
      dest: "{{ a_records_file }}.bak"
      remote_src: yes
      # force: yes # Overwrite backup file on re-runs
    
  # - copy:
  #     remote_src: "{{ cname_records_file }}"
  #     dest: "{{ cname_records_file }}.bak"
  #     remote_src: yes
  #     force: yes # Overwrite backup file on re-runs

    # TODO: Remove duplicates with sed, somehow
  - name: "Populate A records" # E.g: 1.2.3.4 a.test.lan
    shell: "echo '{{ hostvars[item].ct_ip }} {{ hostvars[item].fqdn }}' >> {{ a_records_file }}"
    with_items: "{{ groups['prox_hosts'] }}"
    become: yes

  # - name: "Populate CNAME records" # E.g: cname=cname.test.lan,a.test.lan
  #   delegate_to: pihole
  #   sh: "echo '{{ CNAME_GOES_HERE }}.{{ domain }},{{ fqdn }}' >> {{ cname_records_file }}"
  #   become: yes

### I'm using new plays to avoid unecessary loops
### Quick and dirty sequencing until roles are configured
- name: "Show contents of A records file" 
  hosts: pihole
  gather_facts: no
  tasks:
  - command: "cat /etc/pihole/custom.list"
    register: show
  - debug:
      var: show.stdout

- name: "Restart DNS" 
  hosts: pihole
  gather_facts: no
  tasks:
  - command: "pihole restartdns"
    register: restart
  - debug:
      var: restart.stdout

- name: "Verify DNS from localhost" # Should be dig, whatever
  hosts: prox_hosts
  gather_facts: no
  tasks:
  - delegate_to: localhost
    shell: "nslookup {{ fqdn }} {{ hostvars['pihole'].ct_ip }} | grep Name | awk '{print $2}'"
    register: test_localhost
    failed_when: "test_localhost.stdout != fqdn"
  # - debug:
  #     var: test_localhost

- name: "Update Proxmox DNS server to Pihole"
  hosts: prox
  gather_facts: no
  vars:
    resolv: /etc/resolv.conf
  tasks:
  - name: "Backup {{ resolv }}"
    copy:
      src: "{{ resolv }}"
      dest: "{{ resolv }}.bak"
      remote_src: yes

  - name: "Edit {{ resolv }}" # This applies DNS to all containers as well
    command: "sed -i 's/.*nameserver.*/nameserver {{ hostvars['pihole'].ct_ip }}/' {{ resolv }}"

  #   ### Proxmox picked up the new DNS server instantly? Cool! 
  # - name: "Reboot Proxmox"
  #   command: "reboot"

  # - name: "Verify Proxmox is online"
  #   delay: 10
  #   wait_for_connection:
  #     timeout: 3
  #   retries: 3
  #   register: verify
  #   until: verify.failed == False

### Man, using roles sure would clean up this mess.
### Someone should really do something about that...
- hosts: prox_hosts
  gather_facts: no
  tasks:
  - name: "Restart all containers"
    delegate_to: localhost
    proxmox:
      api_host: "{{ prox_host }}"
      api_user: "{{ prox_user }}"
      api_password: "{{ prox_password }}"

      vmid: "{{ id }}"
      state: restarted
      
  - name: "Verify containers are online"
    wait_for_connection:
      timeout: 3
    retries: 3
    register: verify
    until: verify.failed == False

  - name: "Verify DNS from containers"
    delegate_to: localhost
    shell: "nslookup {{ fqdn }} {{ hostvars['pihole'].ct_ip }} | grep Name | awk '{print $2}'"
    register: test_cts
    failed_when: "test_cts.stdout != fqdn"
  - debug:
      var: test_cts

