### PREPARE
- name: "Backup previous records"
  copy:
    src: "{{ a_records_file }}"
    dest: "{{ a_records_file }}.bak"
    remote_src: yes
  become: yes

# - name: "Wipe A records file"
#   command: "echo '' > {{ a_records_file }}"
#   become: yes
# - name: "Wipe CNAME records file"
#   command: "echo '' > {{ cname_records_file }}"
#   become: yes
- name: "Wipe all records"
  command: "echo '' > {{ item }}"
  with_items: ["{{ a_records_file }}", "{{ cname_records_file }}"]
  become: yes

### POPULATE
# TODO: Combine these two tasks
- name: "Populate A records" # E.g: 1.2.3.4 a.test.lan
  shell: "echo '{{ hostvars[item].ct_ip }} {{ hostvars[item].fqdn }}' >> {{ a_records_file }}"
  with_items: "{{ groups['all_cts'] }}"
  become: yes

# - name: "Populate CNAME records" # E.g: cname=cname.test.lan,a.test.lan
#   shell: "echo '{{ CNAME_GOES_HERE }}.{{ domain }},{{ fqdn }}' >> {{ cname_records_file }}"
#   with_items: "{{ groups['all_cts'] }}"
#   become: yes

### DISPLAY
# TODO: Combine these two tasks
- name: "Display A records" 
  command: "cat {{ a_records_file }}"
  register: a_result
- debug:
    var: a_result.stdout
  # when: a_result.stdout is defined

# - name: "Display CNAME records" 
#   command: "cat {{ cname_records_file }}"
#   register: cname_result
# - debug:
#       var: cname_result.stdout

### RESTART & VERIFY
- name: "Restart DNS"
  # delegate_to: pihole
  command: "pihole restartdns"
  register: restart
- debug:
    var: restart.stdout

- name: "Verify DNS from pihole" # Should be dig, whatever
  # delegate_to: localhost
  shell: "nslookup {{ hostvars[item].fqdn }} {{ dns }} | grep Name | awk '{print $2}'"
  register: verify
  failed_when: "verify.stdout != hostvars[item].fqdn"
  with_items: "{{ groups['all_cts'] }}"
