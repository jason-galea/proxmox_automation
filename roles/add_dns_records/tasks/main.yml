### Populate records
# - name: "Add DNS records to Pihole"
#   hosts: pihole
#   gather_facts: no
#   vars:
#     a_records_file: /etc/pihole/custom.list
#     cname_records_file: /etc/dnsmasq.d/05-pihole-custom-cname.conf
#   tasks:

### Check
# - block:
#   - name: "Check if DNS is already working from pihole"
#     shell: "nslookup {{ hostvars[item].fqdn }} {{ dns }} | grep Name | awk '{print $2}'"
#     register: verify
#     failed_when: "verify.stdout != hostvars[item].fqdn"
#     with_items: "{{ groups['all_hosts'] }}"
#     no_log: true

#   - name: "PASS: Skipping..."
#     meta: end_play
#   rescue:
#   - name: "FAIL: Continuing to populate DNS records"
#     meta: noop

- name: "Wipe all records"
  delegate_to: pihole
  shell: |
    echo '' > {{ a_records_file }}
    echo '' > {{ cname_records_file }}
  become: yes

  ### TODO: Combine these two tasks.
- name: "Populate A records" # E.g: "1.2.3.4 a.test.lan"
  delegate_to: pihole
  shell: "echo '{{ ip }} {{ fqdn }}' >> {{ a_records_file }}"
  become: yes
  # when: fqdn is defined # Redundant, but can be used to match/loop with below task

  ### TODO: Implement "www.test.lan" CNAME for Apache, then test.
- name: "Populate CNAME records" # E.g: "cname=cname.test.lan,a.test.lan"
  delegate_to: pihole
  shell: "echo 'cname={{ cname }},{{ fqdn }}' >> {{ cname_records_file }}"
  become: yes
  when: cname is defined

  ### TODO: Combine these two tasks
  # Can't loop multiple tasks (cat + debug) using "with_items"
  # Recommended solution is to "include_tasks" from another file (._.)
- name: "Display A records" 
  delegate_to: pihole
  shell: "cat {{ a_records_file }} | cat"
  register: a_result
- debug:
    var: a_result.stdout
- name: "Display CNAME records" 
  delegate_to: pihole
  shell: "cat {{ cname_records_file }} | cat"
  register: cname_result
- debug:
    var: cname_result.stdout

- name: "Restart DNS"
  delegate_to: pihole
  command: "pihole restartdns"
  register: restart
- debug:
    var: restart.stdout


### Verify from pihole
  ### TODO: Combine these two tasks
- name: "Verify A record resolution from pihole"
  delegate_to: pihole
  # shell: "nslookup {{ fqdn }} {{ dns }} | grep Name | awk '{print $2}'"
  shell: "nslookup {{ fqdn }} | grep Name | awk '{print $2}'" # DNS server is configured during pihole configuration
  register: verify_a_pihole
  failed_when: "verify_a_pihole.stdout != fqdn"

- name: "Verify CNAME resolution from pihole"
  delegate_to: pihole
  # shell: "nslookup {{ cname }} {{ dns }} | grep Name | awk '{print $2}'"
  shell: "nslookup {{ cname }} | grep Name | awk '{print $2}'" # DNS server is configured during pihole configuration
  register: verify_cname_pihole
  failed_when: "verify_cname_pihole.stdout != cname"

  
### Verify from host
  ### TODO: Combine these two tasks
- name: "Verify A record resolution from pihole"
  # delegate_to: pihole
  # shell: "nslookup {{ fqdn }} {{ dns }} | grep Name | awk '{print $2}'"
  shell: "nslookup {{ fqdn }} | grep Name | awk '{print $2}'" # DNS server is configured during pihole configuration
  register: verify_a_host
  failed_when: "verify_a_host.stdout != fqdn"

- name: "Verify CNAME resolution from pihole"
  # delegate_to: pihole
  # shell: "nslookup {{ cname }} {{ dns }} | grep Name | awk '{print $2}'"
  shell: "nslookup {{ cname }} | grep Name | awk '{print $2}'" # DNS server is configured during pihole configuration
  register: verify_cname_host
  failed_when: "verify_cname_host.stdout != cname"