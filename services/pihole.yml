### Install
  # TODO: Check if pihole is installed first

- name: "Install Pihole"
  gather_facts: no
  hosts: pihole
  vars:
    repo_dir: "/home/{{ user }}/pi-hole"
    repo_script: "{{ repo_dir }}/automated\\ install/basic-install.sh"
    answers_dir: "/etc/pihole"
    answers_file: "{{ answers_dir }}/setupVars.conf"
    answers_file_template: "../templates/pihole_answers_file.yml"
    # script_release: v5.8.1
    # script_head_length: 1938
    # script_tail_length: 678
    script_release: v5.9
    script_head_length: 1943
    script_tail_length: 678
  tasks:

  - name: "Check if already installed"
    command: "which pihole"
    register: check
    failed_when: check.rc not in [0, 1] # Accept errors, only care about stdout

    ### Making this block conditional saves so much time on reruns lol
  - block:
    - name: "Clone pihole git repo"
      ansible.builtin.git:
        repo: "https://github.com/pi-hole/pi-hole.git"
        dest: "{{ repo_dir }}"
        version: "{{ script_release }}"
        force: yes # Overwrite modifications on re-runs, to avoid errors

    - name: "Create /etc/pihole"
      file:
        path: "{{ answers_dir }}"
        state: directory
      become: yes

    - name: "Populate {{ answers_file }}"
      template:
        src: "{{ answers_file_template }}"
        dest: "{{ answers_file }}"
      become: yes

    - name: "Display {{ answers_file }}"
      command: "cat {{ answers_file }}"
      register: answers
    - debug:
        var: answers.stdout

      ### This is reeeaaally screwy
      ### I can't even use a template file, since it changes with each pihole release 
    - name: "Remove interactivity from install script"
      shell: |
        mv {{ repo_script }} {{ repo_script }}.bak
        echo "$(head -{{ script_head_length }} {{ repo_script }}.bak)" > {{ repo_script }}
        echo "    useUpdateVars=true" >> {{ repo_script }}
        echo "$(tail -{{ script_tail_length }} {{ repo_script }}.bak)" >> {{ repo_script }}

    - name: "Install Pihole"
      command: "bash {{ repo_script }}"
      become: yes
      register: install_pihole
    - debug:
        var: install_pihole.stdout

    - name: "Set password"
      command: "pihole -a -p {{ password }}"
      become: yes
      register: password
    - debug:
        var: password.stdout
    when: check.stdout == ""

  - name: "Verify webserver at http://{{ ansible_host }}/admin"
    wait_for:
      port: "{{ port }}"
      timeout: 10



### Populate records
- name: "Add DNS records to Pihole"
  hosts: pihole
  gather_facts: no
  vars:
    a_records_file: /etc/pihole/custom.list
    cname_records_file: /etc/dnsmasq.d/05-pihole-custom-cname.conf
  tasks:

  - name: "Wipe all records"
    command: "echo '' > {{ item }}"
    with_items: ["{{ a_records_file }}", "{{ cname_records_file }}"]
    become: yes

    # TODO: Combine these two tasks
  - name: "Populate A records" # E.g: 1.2.3.4 a.test.lan
    shell: "echo '{{ hostvars[item].ip }} {{ hostvars[item].fqdn }}' >> {{ a_records_file }}"
    with_items: "{{ groups['all_hosts'] }}" # TODO: Use a seperate play, with delegation instead
    become: yes
  # - name: "Populate CNAME records" # E.g: cname=cname.test.lan,a.test.lan
  #   shell: "echo '{{ CNAME_GOES_HERE }}.{{ domain }},{{ fqdn }}' >> {{ cname_records_file }}"
  #   with_items: "{{ groups['all_hosts'] }}"
  #   become: yes

    # TODO: Combine these two tasks
  - name: "Display A records" 
    command: "cat {{ a_records_file }}"
    register: a_result
  - debug:
      var: a_result.stdout
    # when: a_result.stdout is defined

  # - name: "Display CNAME records" 
  #   command: "cat {{ cname_records_file }}"
  #   register: cname_result
  # - debug:
  #       var: cname_result.stdout

  - name: "Restart DNS"
    # delegate_to: pihole
    command: "pihole restartdns"
    register: restart
  - debug:
      var: restart.stdout

### Verify from pihole
  - name: "Verify DNS from pihole" # Should be dig, whatever
    # delegate_to: localhost
    shell: "nslookup {{ hostvars[item].fqdn }} {{ dns }} | grep Name | awk '{print $2}'"
    register: verify
    failed_when: "verify.stdout != hostvars[item].fqdn"
    with_items: "{{ groups['all_hosts'] }}"



### Apply DNS to hosts
- name: "Apply DNS and verify"
  hosts: prox, localhost
  gather_facts: no
  tasks:
  - name: "Backup /etc/resolv.conf"
    copy:
      src: "{{ resolv }}"
      dest: "{{ resolv }}.bak"
      remote_src: yes
      force: yes
    become: yes

  - name: "Set DNS server to pihole"
      # echo 'search {{ domain }}' > {{ resolv }}
    shell: |
      sed -i 's/.*nameserver.*/nameserver {{ dns }}/' {{ resolv }}
    become: yes
    
### Verify from hosts
  - command: "cat {{ resolv }}"
    register: cat_resolv
  - name: "Display /etc/resolv.conf"
    debug:
      var: cat_resolv.stdout

  - name: "Verify DNS from {{ inventory_hostname }}"
    shell: "nslookup {{ hostvars[item].fqdn }} {{ dns }} | grep Name | awk '{print $2}'"
    register: verify
    failed_when: "verify.stdout != hostvars[item].fqdn"
    with_items: "{{ groups['all_hosts'] }}"