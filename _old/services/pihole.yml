---
- name: "Install pihole"
  gather_facts: no
  hosts: pihole
  vars:
    repo_dir: "/home/{{ user }}/pi-hole"
    repo_script: "{{ repo_dir }}/automated\\ install/basic-install.sh"
    answers_dir: "/etc/pihole"
    answers_file: "{{ answers_dir }}/setupVars.conf"
    answers_file_template: "../templates/pihole_answers_file.yml"
  tasks:

  ### Check
  # - block:
  #   - name: "Check if pihole is already installed"
  #     shell: "which pihole"
  #     no_log: true
  #   - name: "Check if pihole webserver is active"
  #     wait_for:
  #       port: "{{ port }}"
  #       timeout: 10
  #     no_log: true

  #   - name: "PASS: Skipping..."
  #     meta: end_play
  #   rescue:
  #   - name: "FAIL: Continuing to install pihole"
  #     meta: noop

  ### Install
  - name: "Clone pihole git repo"
    ansible.builtin.git:
      repo: "https://github.com/pi-hole/pi-hole.git"
      dest: "{{ repo_dir }}"

  - name: "Create /etc/pihole"
    file:
      path: "{{ answers_dir }}"
      state: directory
    become: yes

  - name: "Populate {{ answers_file }}"
    template:
      src: "{{ answers_file_template }}"
      dest: "{{ answers_file }}"
    become: yes

  - name: "Display {{ answers_file }}"
    command: "cat {{ answers_file }}"
  #   register: answers
  # - debug:
  #     var: answers.stdout

  - name: "Install Pihole"
    command: "bash {{ repo_script }} --unattended"
    become: yes
  #   register: install_pihole
  # - debug:
  #     var: install_pihole.stdout

  - name: "Set password"
    command: "pihole -a -p {{ password }}"
    become: yes
  #   register: password
  # - debug:
  #     var: password.stdout

  - name: "Verify webserver at http://{{ ansible_host }}/admin"
    wait_for:
      port: "{{ port }}"
      timeout: 10



# ### Populate records
# - name: "Add DNS records to Pihole"
#   hosts: pihole
#   gather_facts: no
#   vars:
#     a_records_file: /etc/pihole/custom.list
#     cname_records_file: /etc/dnsmasq.d/05-pihole-custom-cname.conf
#   tasks:

#   ### Check
#   - block:
#     - name: "Check if DNS is already working from pihole"
#       shell: "nslookup {{ hostvars[item].fqdn }} {{ dns }} | grep Name | awk '{print $2}'"
#       register: verify
#       failed_when: "verify.stdout != hostvars[item].fqdn"
#       loop: "{{ groups['all_hosts'] }}"
#       no_log: true

#     - name: "PASS: Skipping..."
#       meta: end_play
#     rescue:
#     - name: "FAIL: Continuing to populate DNS records"
#       meta: noop

#   - name: "Wipe all records"
#     command: "echo '' > {{ item }}"
#     loop: ["{{ a_records_file }}", "{{ cname_records_file }}"]
#     become: yes

#     ### TODO: Combine these two tasks. Implement "www.test.lan" CNAME & test.
#   - name: "Populate A records" # E.g: 1.2.3.4 a.test.lan
#     shell: "echo '{{ hostvars[item].ip }} {{ hostvars[item].fqdn }}' >> {{ a_records_file }}"
#     loop: "{{ groups['all_hosts'] }}" # TODO: Use a seperate play, with delegation instead
#     become: yes
#   # - name: "Populate CNAME records" # E.g: cname=cname.test.lan,a.test.lan
#   #   shell: "echo '{{ CNAME_GOES_HERE }}.{{ domain }},{{ fqdn }}' >> {{ cname_records_file }}"
#   #   loop: "{{ groups['all_hosts'] }}"
#   #   become: yes

#     ### TODO: Combine these two tasks
#     # Can't loop multiple tasks (cat + debug) using "loop"
#     # Recommended solution is to "include_tasks" from another file (._.)
#   - name: "Display A records" 
#     shell: "cat {{ a_records_file }} | cat"
#     register: a_result
#   - debug:
#       var: a_result.stdout
#   # - name: "Display CNAME records" 
#   #   shell: "cat {{ cname_records_file }} | cat"
#   #   register: cname_result
#   # - debug:
#   #       var: cname_result.stdout

#   - name: "Restart DNS"
#     command: "pihole restartdns"
#     register: restart
#   - debug:
#       var: restart.stdout

#   ### Verify from pihole
#   - name: "Verify DNS from pihole"
#     shell: "nslookup {{ hostvars[item].fqdn }} {{ dns }} | grep Name | awk '{print $2}'"
#     register: verify
#     failed_when: "verify.stdout != hostvars[item].fqdn"
#     loop: "{{ groups['all_hosts'] }}"



### Apply DNS to hosts
- name: "Apply DNS and verify"
  hosts: prox, localhost
  gather_facts: no
  tasks:

  ### Check
  # - block:
  #   - name: "Check if DNS is already working from hosts"
  #     shell: "nslookup {{ hostvars[item].fqdn }} | grep Name | awk '{print $2}'"
  #     register: verify
  #     failed_when: "verify.stdout != hostvars[item].fqdn"
  #     loop: "{{ groups['all_hosts'] }}"
  #     no_log: true

  #   - name: "PASS: Skipping..."
  #     meta: end_play
  #   rescue:
  #   - name: "FAIL: Continuing to update host DNS settings"
  #     meta: noop

  - name: "Backup /etc/resolv.conf"
    copy:
      src: "{{ resolv }}"
      dest: "{{ resolv }}.bak"
      remote_src: yes
      force: yes
    become: yes

  - name: "Set DNS server to pihole"
    shell: sed -i 's/.*nameserver.*/nameserver {{ dns }}/' {{ resolv }}
    become: yes
    
  ### Verify from hosts
  # - command: "cat {{ resolv }}"
  #   register: cat_resolv
  # - name: "Display /etc/resolv.conf"
  #   debug:
  #     var: cat_resolv.stdout

  # - name: "Verify DNS from hosts"
  #   shell: "nslookup {{ hostvars[item].fqdn }} | grep Name | awk '{print $2}'"
  #   register: verify
  #   failed_when: "verify.stdout != hostvars[item].fqdn"
  #   loop: "{{ groups['all_hosts'] }}"